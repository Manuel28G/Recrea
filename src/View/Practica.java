/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package View;

import Componentes.BotonRecrea;
import Componentes.FrameRecrea;
import Componentes.PanelRecrea;
import Contrato.ContratoBotones;
import Contrato.ContratoGeneral;
import Controller.ControllerAgregar;
import Controller.ControllerConsultar;
import Controller.Util;
import Controller.Validaciones;
import Model.Objetos.Actividad;
import Model.Objetos.Ejercicio;
import Model.Objetos.Leccion;
import Model.Objetos.Persona;
import Model.Objetos.Respuesta;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
/**
 * Clase que contiene los ejercicios prácticos a realizar
 * @author Manuel Goncalves L.
 */
public class Practica extends FrameRecrea implements ContratoGeneral,ContratoBotones {

    /**
     * Creates new form Practica
     */
    private final Leccion leccion;
    private final Persona usuario;
    private final Modulos mod;
    private final Ejercicio ejercicio;
    private final int cantEjer;
    private final Component respuesta;
    private final Respuesta resultado;        
    private final DateFormat fechaActual = new SimpleDateFormat("HH:mm:ss dd/MM/yyyy");//formato que queremos para guardar en el xml
    private final Date date=new Date(); //fecha actual
    private final Validaciones valid=new Validaciones();
    private final ControllerConsultar cc=new ControllerConsultar();
    private final int contador;
    private String respTexto="";
    private final Controller.WindowsEjercicio Weje;
    private ControllerAgregar cAgregar;
    private final Actividad actividad;//Objeto para la actividad que se esta realizando
    private final List<Respuesta> respuestas;//lista de objetos Respuesta
   // private final boolean sinRespuesta=false;//para los ejercicios que no tienen respuesta (es teoría)
    
    public Practica(Leccion lcn,Persona usr,Modulos modulos,int cont) {
        initComponents();
        resultado=new Respuesta();
        resultado.SetTiempoInicio(fechaActual.format(date));
        contador=cont;
        mod=modulos;//obtenemos el módulo
        leccion=lcn;//obtenemos la lección
        usuario=usr;//obtenemos el usuario
        //obtenemos la ultima actividad la cual es la que estamos realizando
        int ultimaActividad=usuario.getActividades().size()-1;
        actividad=usuario.getActividades().get(ultimaActividad);
        respuestas=actividad.GetRespuesta();
        ejercicio=lcn.getEjercicios().get(contador);
        cantEjer=leccion.getEjercicios().size();
        Weje=new Controller.WindowsEjercicio(this);
        PanelRecrea pR=Weje.ConfigurarWindows(ejercicio,(contador+1)+Util.SEPARADOR_DE+cantEjer,usuario.getNombre()+" "+usuario.getApellido());
        respuesta=Weje.getComponenteRespuesta();//Obtenemos el componente de la respuesta
        this.fullScreen();
        this.configuracion(pR);
       }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    @Override
    public void ActionOpciones(ActionEvent ae) {
       respTexto=ae.getActionCommand();
       List<BotonRecrea> botones=Weje.getBotones();
       for(BotonRecrea bt:botones){
           if(bt.getName().equals(respTexto))
               bt.setBackground(Color.CYAN);
           else
               bt.setBackground(Color.LIGHT_GRAY);
       }
       
    }
    
    @Override
    public void ActionSiguiente(ActionEvent ae) {

        if(respTexto!=""|| respuesta==null || valid.ValidarRespuestaVacia(respuesta)||
          ( JOptionPane.showConfirmDialog
          (this,Util.DIALOG_CONFIRMAR_CONTINUAR, Util.DIALOG_TITULO_MENSAJE, JOptionPane.OK_CANCEL_OPTION)==JOptionPane.YES_OPTION)){
            resultado.SetPregunta(ejercicio.getEjercicio());
            resultado.SetRespuestaCorrecta(ejercicio.getRespuesta());
            

            if(respTexto!="")
                resultado.SetRespuestaRealizada(respTexto);
            else
                resultado.SetRespuestaRealizada(cc.ObtenerRespuesta(respuesta));
            resultado.SetTiempoRespuesta(fechaActual.format(date));
            
            resultado.SetPuntoTotal(ejercicio.getPuntos());
            if(resultado.EsCorrecta())
                resultado.SetPuntosObtenido(ejercicio.getPuntos());
            actividad.AddRespuesta(resultado);
            if(contador<leccion.getEjercicios().size()-1)
            {
                Practica ptca=new Practica(leccion,usuario,mod,contador+1);
                ptca.setVisible(true);
            }
            else
            {
                cAgregar=new ControllerAgregar();
                int totalP=valid.totalPuntos(respuestas);
                int notaObt=valid.totalPuntosObtenidos(respuestas);
                actividad.SetPuntosTotales(Integer.toString(totalP));
              //  actividad.SetPtosObtenidos(Integer.toString(Estadistica.calculoDeNota(totalP, notaObt)));
                actividad.SetPtosObtenidos(Integer.toString(notaObt));
                cAgregar.AgregarActividadPersona(actividad);
               Resultados result=new Resultados(mod,usuario,0);
               result.setVisible(true);
            }
            this.setVisible(false);
            this.dispose();
        }
        
    }
    
    @Override
    public void ActionSalir(ActionEvent ae) {
       try{
               if(JOptionPane.showConfirmDialog(this,Util.DIALOG_CONFIRMAR_SALIDA, Util.DIALOG_TITULO_SALIDA, JOptionPane.OK_CANCEL_OPTION)==JOptionPane.YES_OPTION){
                mod.setVisible(true);
              //  usuario.resetActividades();
                this.setVisible(false);
                this.dispose();
               }
            }
        catch (Exception ex){
               System.out.println(ex);
        }
    }
    
    @Override
    public void ActionSonido(ActionEvent ae) {
       throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    @Override
    public void SetEnable(boolean bol){
       this.SetEnable(bol);
    }
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Practica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Practica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Practica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Practica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Practica(null,null,null,0).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void Reaload() {
        this.paintAll(this.getGraphics());    
    }
    
    @Override
    public Persona GetPersona() {
      return this.usuario;
    }

    @Override
    public void avisoMensaje(String mensaje) {
        JOptionPane.showMessageDialog(this,mensaje, Util.DIALOG_TITULO_MENSAJE, JOptionPane.INFORMATION_MESSAGE);
                }
}
